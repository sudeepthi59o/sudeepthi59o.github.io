<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>App on Sudeepthi Rebbalapalli</title><link>https://sudeepthi59o.github.io/categories/app/</link><description>Recent content in App on Sudeepthi Rebbalapalli</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Sat, 12 Apr 2025 23:00:00 +0000</lastBuildDate><atom:link href="https://sudeepthi59o.github.io/categories/app/index.xml" rel="self" type="application/rss+xml"/><item><title>Android Box Drawing App</title><link>https://sudeepthi59o.github.io/portfolio/android/drawingboxes/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/android/drawingboxes/</guid><description>&lt;p>A simple and interactive Android app that lets users draw boxes by touching the screen. The app supports multiple boxes on the canvas, and each box can be drawn with touch gestures, offering real-time visual feedback&lt;/p>
&lt;h3 id="core-features">Core Features&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Interactive Box Drawing:&lt;/strong> Users can draw boxes by tapping and dragging on the screen.&lt;/li>
&lt;li>&lt;strong>Multiple Boxes:&lt;/strong> Multiple boxes can be drawn and exist simultaneously on the canvas.&lt;/li>
&lt;li>&lt;strong>Real-Time Update:&lt;/strong> The app provides instant visual updates as users interact with the screen.&lt;/li>
&lt;li>&lt;strong>Customizable Appearance:&lt;/strong> Each box is drawn with a customizable color and style.&lt;/li>
&lt;li>&lt;strong>Canvas Background:&lt;/strong> A soft background color for better visibility and contrast.&lt;/li>
&lt;/ul>
&lt;h3 id="design">Design&lt;/h3>
&lt;p>The app features a minimalistic design with a simple canvas as the drawing area. Users can draw boxes by pressing down and dragging their finger across the screen. The app dynamically responds to touch events, allowing for precise control of box size and position.&lt;/p></description></item><item><title>Android Calculator App</title><link>https://sudeepthi59o.github.io/portfolio/android/calculator/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/android/calculator/</guid><description>&lt;p>The Android Calculator app is designed to perform basic arithmetic operations while mimicking the functionality of the iPhone&amp;rsquo;s default calculator. It supports both portrait and landscape modes, with landscape mode unlocking advanced trigonometric and logarithmic functions.&lt;/p>
&lt;h3 id="core-features">Core Features&lt;/h3>
&lt;ul>
&lt;li>Basic arithmetic operations (addition, subtraction, multiplication, division)&lt;/li>
&lt;li>Trigonometric functions (sin, cos, tan) and logarithmic functions (log10, ln) in landscape mode&lt;/li>
&lt;li>User input persists across device rotations&lt;/li>
&lt;li>Custom app icon and button layout&lt;/li>
&lt;li>Log messages recorded for each button click&lt;/li>
&lt;/ul>
&lt;h3 id="design">Design&lt;/h3>
&lt;p>The app features a simple and intuitive interface with a standard calculator layout. In landscape mode, the layout adjusts to provide additional scientific functions, while the UI remains clear and easy to navigate. The app dynamically adjusts to changes in orientation, ensuring users can continue their calculations without interruption.&lt;/p></description></item><item><title>Android Custom Pizza Builder</title><link>https://sudeepthi59o.github.io/portfolio/android/pizzaapp/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/android/pizzaapp/</guid><description>&lt;p>A dynamic Android app that allows users to customize a pizza by selecting toppings and their placement—left, right, or across the whole pizza. As toppings are added or removed, the total price updates in real-time based on placement.&lt;/p>
&lt;h3 id="core-features">Core Features&lt;/h3>
&lt;ul>
&lt;li>Interactive topping selection with three placement options: Left, Right, or All.&lt;/li>
&lt;li>Real-time price calculation: $0.50 for left/right toppings, $1.00 for full-pizza toppings.&lt;/li>
&lt;li>Modular architecture using Kotlin enum class and Parcelize for efficient state management.&lt;/li>
&lt;li>Maintains state and updates the UI seamlessly using Jetpack Compose.&lt;/li>
&lt;/ul>
&lt;h3 id="design">Design&lt;/h3>
&lt;p>The app uses a modern, clean interface styled with Material 3 themes. Users are presented with a base pizza and a topping menu. Each topping has an associated image overlay and label, providing visual feedback as they are placed on the pizza. The UI responds instantly to user input, reflecting topping changes and updated pricing.&lt;/p></description></item><item><title>Android Notes App</title><link>https://sudeepthi59o.github.io/portfolio/android/notesapp/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/android/notesapp/</guid><description>&lt;p>A user-friendly Android app for creating, editing, and managing notes. The app provides a clean, responsive interface to add, update, and delete text notes—making it ideal for quick reminders, to-do lists, or jotting down ideas.&lt;/p>
&lt;h3 id="core-features">Core Features&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>User Authentication:&lt;/strong> Login screen to ensure notes are accessed only by the intended user.&lt;/li>
&lt;li>&lt;strong>Create Notes:&lt;/strong> Add new notes with a title and content.&lt;/li>
&lt;li>&lt;strong>Edit Notes:&lt;/strong> Modify existing notes with ease.&lt;/li>
&lt;li>&lt;strong>Delete Notes:&lt;/strong> Remove unwanted notes with a long press.&lt;/li>
&lt;li>&lt;strong>Persistent Storage:&lt;/strong> Notes are stored locally using Room Database and persist across sessions.&lt;/li>
&lt;li>&lt;strong>RecyclerView UI:&lt;/strong> Scrollable and responsive list of saved notes.&lt;/li>
&lt;/ul>
&lt;h3 id="design">Design&lt;/h3>
&lt;p>The app uses a minimalistic design to keep the focus on content. Notes are displayed in a vertically scrolling list, with each item showing the title and preview of the note body. A floating action button (FAB) allows users to quickly create a new note. A simple form is used for editing and creating notes, ensuring a seamless and distraction-free user experience.&lt;/p></description></item><item><title>Android Posts App</title><link>https://sudeepthi59o.github.io/portfolio/android/postsapp/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/android/postsapp/</guid><description>&lt;p>The Android Posts app displays real-time posts submitted by users, including usernames, image uploads, and descriptions. The feed mimics core social platform functionality and includes authentication, live data updates, and dynamic UI rendering.&lt;/p>
&lt;h3 id="core-features">Core Features&lt;/h3>
&lt;ul>
&lt;li>Displays a real-time feed of posts from Firebase Firestore&lt;/li>
&lt;li>Each post includes a username, description, image (optional), and relative timestamp&lt;/li>
&lt;li>Supports user authentication and logout using Firebase Auth&lt;/li>
&lt;li>Navigation to post creation via a floating action button (FAB)&lt;/li>
&lt;li>Uses Coil library for smooth and efficient image loading&lt;/li>
&lt;/ul>
&lt;h3 id="design">Design&lt;/h3>
&lt;p>The app follows the Model-View-ViewModel (MVVM) architecture to maintain clean separation of concerns. Posts are observed using Kotlin StateFlow for real-time UI updates. A RecyclerView is used to display a scrollable list of posts with a custom layout per item. Relative timestamps (e.g., “2 hours ago”) are calculated using DateUtils. For development convenience, post images are hosted on GitHub and dynamically loaded using the Coil image loading library.&lt;/p></description></item><item><title>Android Sunset Animation App</title><link>https://sudeepthi59o.github.io/portfolio/android/sunsetanimation/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/android/sunsetanimation/</guid><description>&lt;p>A simple Android app that simulates a sunset animation. Watch as the sun moves down the sky and the background color transitions from a blue sky to a beautiful sunset and eventually to a starry night.&lt;/p>
&lt;h3 id="core-features">Core Features&lt;/h3>
&lt;ul>
&lt;li>Smooth animation of the sun setting across the sky.&lt;/li>
&lt;li>Dynamic background color change from blue sky to sunset and night sky.&lt;/li>
&lt;li>Interactive: Tap anywhere on the screen to trigger the animation.&lt;/li>
&lt;/ul>
&lt;h3 id="design">Design&lt;/h3>
&lt;p>The app features a serene sky view, with a sun that moves down the screen to simulate the transition from day to night. The background color shifts from blue to sunset hues and then to a night sky, creating a peaceful, visually engaging experience.&lt;/p></description></item><item><title>Android Ticket Managment App</title><link>https://sudeepthi59o.github.io/portfolio/android/ticketingapp/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/android/ticketingapp/</guid><description>&lt;p>A simple yet effective Android application for managing task or issue tickets. Users can create, update, and view tickets with fields such as title, description, date, assignee, and an optional photo attachment.&lt;/p>
&lt;h3 id="core-features">Core Features&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Ticket Creation &amp;amp; Editing:&lt;/strong> Add or update task-related tickets with essential details.&lt;/li>
&lt;li>&lt;strong>Room Database Integration:&lt;/strong> Tickets are stored locally with Room, supporting schema migrations and data persistence.&lt;/li>
&lt;li>&lt;strong>Live Data Updates:&lt;/strong> Uses Kotlin Flows and StateFlow to observe real-time ticket list updates.&lt;/li>
&lt;li>&lt;strong>Date Picker Dialog:&lt;/strong> Pick a due date for a ticket using an intuitive calendar interface.&lt;/li>
&lt;li>&lt;strong>Image Attachment (Planned/Partial):&lt;/strong> Schema supports photo file paths for ticket-related images (with potential to expand UI support).&lt;/li>
&lt;/ul>
&lt;h3 id="design">Design&lt;/h3>
&lt;p>The app uses a ViewModel-driven architecture to separate UI and business logic, promoting maintainability and testability. A Repository pattern manages data access and abstracts Room operations. Tickets are presented in a list that updates automatically as data changes, creating a responsive experience.&lt;/p></description></item></channel></rss>