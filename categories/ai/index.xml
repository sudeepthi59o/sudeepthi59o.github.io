<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ai on Sudeepthi Rebbalapalli</title><link>https://sudeepthi59o.github.io/categories/ai/</link><description>Recent content in Ai on Sudeepthi Rebbalapalli</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Sat, 12 Apr 2025 23:00:00 +0000</lastBuildDate><atom:link href="https://sudeepthi59o.github.io/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>Automated Acquire Game</title><link>https://sudeepthi59o.github.io/portfolio/automated-acquire-game/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/automated-acquire-game/</guid><description>&lt;p>The Automated Acquire Game project is a Python-based implementation of the classic board game &lt;a href="https://en.wikipedia.org/wiki/Acquire">Acquire&lt;/a>, designed to simulate and automate gameplay. It includes intelligent decision-making algorithms to simulate player behavior and strategic gameplay. The project is modular, handling different aspects of the game such as gameplay flow, board state, and AI-driven player logic.&lt;/p>
&lt;hr>
&lt;h2 id="key-features">Key Features&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Automated Gameplay&lt;/strong>: AI-driven simulation allows the game to play itself with no human input.&lt;/li>
&lt;li>&lt;strong>Player Behavior Modeling&lt;/strong>: Uses game-tree logic to simulate strategic decision-making.&lt;/li>
&lt;li>&lt;strong>Board Management&lt;/strong>: Automates tile placement, hotel formation, mergers, and score calculation.&lt;/li>
&lt;li>&lt;strong>Game Tree Logic&lt;/strong>: Evaluates possible moves and predicts outcomes for better strategy.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="impact">Impact&lt;/h2>
&lt;p>This project adds an AI-powered dimension to a classic strategy board game, making it a strong showcase for algorithms, decision trees, and game theory. It offers a foundation for developing more complex game-playing AI or simulating various player types.&lt;/p></description></item><item><title>Early Onset Parkinson's Detection from Speech Data</title><link>https://sudeepthi59o.github.io/portfolio/early-onset-parkinsons-detection/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/early-onset-parkinsons-detection/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This project implements an end-to-end deep learning model using convolutional neural networks (CNNs) to detect early-onset Parkinsonâ€™s Disease (PD) from speech data. Leveraging Mel spectrograms and advanced preprocessing, the model aims to identify subtle vocal indicators of PD.&lt;/p>
&lt;p>The work builds on methodologies by Quan et al. and evaluates their applicability to a real-world Italian dataset. Tools such as &lt;strong>Librosa&lt;/strong> for audio processing and &lt;strong>NeuroSpeech&lt;/strong> for feature exploration played a crucial role in the pipeline.&lt;/p></description></item><item><title>Parts-of-Speech (POS) Tagging with Hidden Markov Models (HMM) and Viterbi Algorithm</title><link>https://sudeepthi59o.github.io/portfolio/pos-tagging-hmm/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/pos-tagging-hmm/</guid><description>&lt;p>This is some content&lt;/p></description></item><item><title>Predictive Maintenance Using AWS Machine Learning</title><link>https://sudeepthi59o.github.io/portfolio/predictive-maintainance/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/predictive-maintainance/</guid><description>&lt;h2 id="aws-machine-learning-for-predictive-maintenance">AWS Machine Learning for Predictive Maintenance&lt;/h2>
&lt;h3 id="overview">&lt;strong>Overview&lt;/strong>&lt;/h3>
&lt;p>This project focuses on developing a Predictive Maintenance System using AWS and Machine Learning. The system predicts machine failures based on sensor data, enabling proactive maintenance and minimizing downtime. By leveraging AWS services, the project efficiently processes and analyzes data to provide real-time predictions of equipment malfunctions.&lt;/p>
&lt;h3 id="technologies-used">&lt;strong>Technologies Used&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>AWS Services:&lt;/strong>
&lt;ul>
&lt;li>AWS SageMaker (for model training and deployment)&lt;/li>
&lt;li>AWS S3 (for data storage)&lt;/li>
&lt;li>AWS Lambda (for serverless computing)&lt;/li>
&lt;li>AWS IAM (for access management)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Machine Learning Models:&lt;/strong>
&lt;ul>
&lt;li>Logistic Regression&lt;/li>
&lt;li>Naive Bayes&lt;/li>
&lt;li>Random Forest&lt;/li>
&lt;li>(Explored CNNs and RNNs for future improvements)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Programming Language:&lt;/strong> Python&lt;/li>
&lt;li>&lt;strong>Libraries/Frameworks:&lt;/strong>
&lt;ul>
&lt;li>pandas, numpy, scikit-learn, AWS SDK (boto3)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="implementation">&lt;strong>Implementation&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Data Collection &amp;amp; Preprocessing:&lt;/strong>&lt;/p></description></item></channel></rss>