<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ai on Sudeepthi Rebbalapalli</title><link>https://sudeepthi59o.github.io/categories/ai/</link><description>Recent content in Ai on Sudeepthi Rebbalapalli</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Sat, 12 Apr 2025 23:00:00 +0000</lastBuildDate><atom:link href="https://sudeepthi59o.github.io/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>Automated Acquire Game</title><link>https://sudeepthi59o.github.io/portfolio/automated-acquire-game/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/automated-acquire-game/</guid><description>&lt;p>The Automated Acquire Game project is a Python-based implementation of the classic board game &lt;a href="https://en.wikipedia.org/wiki/Acquire">Acquire&lt;/a>, designed to simulate and automate gameplay. It includes intelligent decision-making algorithms to simulate player behavior and strategic gameplay. The project is structured with a modular object-oriented architecture, handling different components such as gameplay flow, board state management, and AI-driven player logic.&lt;/p>
&lt;hr>
&lt;h2 id="key-features">&lt;strong>Key Features&lt;/strong>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Automated Gameplay&lt;/strong>: AI-driven simulation allows the game to play itself with no human input.&lt;/p></description></item><item><title>Early Onset Parkinson's Detection from Speech Data</title><link>https://sudeepthi59o.github.io/portfolio/early-onset-parkinsons-detection/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/early-onset-parkinsons-detection/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This project implements an end-to-end deep learning model using &lt;strong>convolutional neural networks (CNNs)&lt;/strong> to detect &lt;strong>early-onset Parkinson&amp;rsquo;s Disease (PD)&lt;/strong> from speech data. By leveraging &lt;strong>Mel spectrograms&lt;/strong>—visual and mathematical representations of sound frequencies over time, to reflect human hearing perception—our model extracts features that help identify vocal indicators of PD.&lt;/p>
&lt;p>The work builds on methodologies by Quan et al. and evaluates their applicability to a real-world Italian dataset. Tools like &lt;strong>Librosa&lt;/strong> were used for audio processing, and &lt;strong>NeuroSpeech&lt;/strong>, a software tool designed to assist medical professionals in evaluating biomarkers of neurodegenerative diseases through speech analysis, was explored to identify the key factors in detecting PD from speech.&lt;/p></description></item><item><title>Parts-of-Speech (POS) Tagging with Hidden Markov Models (HMM) and Viterbi Algorithm</title><link>https://sudeepthi59o.github.io/portfolio/pos-tagging-hmm/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/pos-tagging-hmm/</guid><description>&lt;p>This is some content&lt;/p></description></item><item><title>Predictive Maintenance Using AWS Machine Learning</title><link>https://sudeepthi59o.github.io/portfolio/predictive-maintainance/</link><pubDate>Sat, 12 Apr 2025 23:00:00 +0000</pubDate><guid>https://sudeepthi59o.github.io/portfolio/predictive-maintainance/</guid><description>&lt;h2 id="aws-machine-learning-for-predictive-maintenance">AWS Machine Learning for Predictive Maintenance&lt;/h2>
&lt;h3 id="overview">&lt;strong>Overview&lt;/strong>&lt;/h3>
&lt;p>This project focuses on developing a Predictive Maintenance System using AWS and Machine Learning. The system predicts machine failures based on sensor data, enabling proactive maintenance and minimizing downtime. By leveraging AWS services, the project efficiently processes and analyzes data to provide real-time predictions of equipment malfunctions.&lt;/p>
&lt;h3 id="technologies-used">&lt;strong>Technologies Used&lt;/strong>&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>AWS Services:&lt;/strong>
&lt;ul>
&lt;li>AWS SageMaker (for model training and deployment)&lt;/li>
&lt;li>AWS S3 (for data storage)&lt;/li>
&lt;li>AWS Lambda (for serverless computing)&lt;/li>
&lt;li>AWS IAM (for access management)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Machine Learning Models:&lt;/strong>
&lt;ul>
&lt;li>Logistic Regression&lt;/li>
&lt;li>Naive Bayes&lt;/li>
&lt;li>Random Forest&lt;/li>
&lt;li>(Explored CNNs and RNNs for future improvements)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Programming Language:&lt;/strong> Python&lt;/li>
&lt;li>&lt;strong>Libraries/Frameworks:&lt;/strong>
&lt;ul>
&lt;li>pandas, numpy, scikit-learn, AWS SDK (boto3)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="implementation">&lt;strong>Implementation&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Data Collection &amp;amp; Preprocessing:&lt;/strong>&lt;/p></description></item></channel></rss>